/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'cpp'
    id 'c'
}

apply from: 'toolchains.gradle'

model {
    flavors {
        normal
        avx2
    }
    //noinspection GroovyAssignabilityCheck
    components {
        timescale(NativeLibrarySpec) {
            targets.each { targetPlatform it }
            sources {
                cpp {
                    source {
                        srcDir "timescale"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                if(isX86_32(targetPlatform) && isLinux(targetPlatform)) {
                    cppCompiler.define "SOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS"
                }
            }
        }
    }
    binaries {
        all {
            lib library: 'jni', linkage: 'api'
            if(toolChain in VisualCpp) {
                cppCompiler.define "ST_NO_EXCEPTION_HANDLING"
                cppCompiler.args << '/std:c++17' << "/Ox"
                cCompiler.args << "/Ox"
            } else if(toolChain in Gcc || toolChain in Clang) {
                cppCompiler.define "ST_NO_EXCEPTION_HANDLING"
                cppCompiler.args << '-std=c++17' << '-O3' << '-fno-exceptions' << '-fno-rtti'
                cCompiler.args << "-O3"
            }
            switch(targetPlatform.architecture.name) {
                case "x86-64":
                    if(flavor == flavors.avx2) {
                        if(toolChain in VisualCpp) {
                            cCompiler.args << "/arch:AVX2"
                            cppCompiler.args << "/arch:AVX2"
                        } else if(toolChain in Gcc || toolChain in Clang) {
                            cCompiler.args << "-mavx2"
                            cppCompiler.args << "-mavx2"
                        }
                    }
                    break
            //todo arm vectorization
            }

            if(isFreebsd(targetPlatform)) {
                lib library: 'freebsd_headers', linkage: 'api'
            }
            if(isGlibc(targetPlatform)) {
                def base = project.projectDir.toString()
                def suffix = isX86_64(targetPlatform) ? "x86-64"
                            : isX86_32(targetPlatform) ? "x86" : null
                if(suffix != null) {
                    def path = new File(project.projectDir, "glibc/force_link_glibc_2.22_${suffix}.h").getAbsolutePath()
                    cCompiler.args << "-include" << path
                    cppCompiler.args << "-include" << path
                }
            }
        }
    }
}



tasks.withType(LinkSharedLibrary) {
    def flavor = it.linkedFile.asFile.orNull.getParentFile().getName()
    def filename = it.installName.get()
    def target = it.targetPlatform.get()
    if(flavor == "avx2") {
        if(!isX86(target)) {
            return
        }
        def baseName = filename.substring(0, filename.lastIndexOf('.'))
        filename = baseName + "-avx2" + filename.substring(filename.lastIndexOf('.'))
    } else { // keep darwin avx2 natives with the default name, no need to avoid conflict with arm64
        if(isDarwin(target)) {
            def baseName = filename.substring(0, filename.lastIndexOf('.'))
            if(isX86_64(target)) {
                baseName += "-x86-64"
            } else if(isArm64(target)) {
                baseName += "-aarch64"
            } else {
                throw new Exception("Unhandled darwin target '" + target + "'")
            }
            filename = baseName + ".dylib"
        }
    }
    def newPath = new File(rootProject.projectDir, "src/main/resources/natives/" + targetDirectoryName(target) + "/" + filename).getAbsoluteFile()
    newPath.getParentFile().mkdirs()
    it.linkedFile.set(newPath)
    taskForTarget(target).dependsOn it
}
